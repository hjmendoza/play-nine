{"version":3,"sources":["components/stars.js","components/button.js","components/answer.js","components/numbers.js","components/doneframe.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Stars","props","stars","i","randomStarNum","push","react_default","a","createElement","className","index_es","icon","faStar","Button","button","answerCorrect","onClick","acceptAnswer","faCheckDouble","faTimes","checkAnswer","disabled","selectedNumbers","length","faCheck","redraw","redrawCount","faRedo","Answer","map","number","key","unselectNumber","Numbers","numberClassName","usedNumbers","indexOf","list","selectNumber","DoneFrame","doneStatus","resetGame","possibleCombinationSum","arr","n","pop","listSize","combinationsCount","combinationSum","j","Game","state","initialState","_this","setState","clickedNumber","prevState","concat","filter","reduce","acc","randomNumber","updateDoneStatus","possibleSolutions","_ref","possibleNumbers","_this$state","this","components_stars","answer","components_button","doneframe","numbers","Component","Math","floor","random","App","components_game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAmBeA,EAdD,SAACC,GAGb,IADA,IAAIC,EAAQ,GACHC,EAAE,EAAGA,EAAIF,EAAMG,cAAeD,IACrCD,EAAMG,KAAKC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAaH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAMC,QAG9D,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZP,ICiCQW,EAvCA,SAACZ,GACd,IAAIa,EACJ,OAAOb,EAAMc,eACX,KAAK,EACHD,EACAR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaO,QAAWf,EAAMgB,cAC9CX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAMO,QAEjD,MAEF,KAAK,EACHJ,EACAR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAWH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAMQ,QAEjD,MAEF,QACEL,EACER,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MACVO,QAASf,EAAMmB,YACfC,SAA2C,IAAjCpB,EAAMqB,gBAAgBC,QACxCjB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAMa,QAKhC,OACElB,EAAAC,EAAAC,cAAA,OAAMC,UAAU,WACbK,EACDR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WACVO,QAASf,EAAMwB,OACfJ,SAAgC,IAAtBpB,EAAMyB,aACxBpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAASH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAMgB,OAAe1B,EAAMyB,eC1BzDE,EAbA,SAAC3B,GACd,OACEK,EAAAC,EAAAC,cAAA,OAAMC,UAAU,WACbR,EAAMqB,gBAAgBO,IAAI,SAACC,EAAQ3B,GAAT,OACzBG,EAAAC,EAAAC,cAAA,QAAMuB,IAAK5B,EACTa,QAAS,kBAAMf,EAAM+B,eAAeF,KACnCA,OCLLG,EAAU,SAAVA,EAAWhC,GACf,IAAMiC,EAAkB,SAACJ,GACvB,OAAI7B,EAAMkC,YAAYC,QAAQN,IAAW,EAChC,OAEL7B,EAAMqB,gBAAgBc,QAAQN,IAAW,EACpC,gBADT,GAIF,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,WACGyB,EAAQI,KAAKR,IAAI,SAACC,EAAQ3B,GAAT,OAChBG,EAAAC,EAAAC,cAAA,QAAMuB,IAAK5B,EAAGM,UAAWyB,EAAgBJ,GACnCd,QAAS,kBAAMf,EAAMqC,aAAaR,KACrCA,QAQbG,EAAQI,KAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAEjBJ,QCjBAM,EATG,SAACtC,GACjB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKP,EAAMuC,YACXlC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBO,QAASf,EAAMwC,WAAlD,gBCEFC,EAAyB,SAAzBA,EAAkCC,EAAKC,GACzC,GAAID,EAAIP,QAAQQ,IAAM,EAAK,OAAO,EAClC,GAAID,EAAI,GAAKC,EAAK,OAAO,EACzB,GAAID,EAAIA,EAAIpB,OAAS,GAAKqB,EAExB,OADAD,EAAIE,MACGH,EAAuBC,EAAKC,GAGrC,IADA,IAAIE,EAAWH,EAAIpB,OAAQwB,EAAqB,GAAKD,EAC5C3C,EAAI,EAAGA,EAAI4C,EAAoB5C,IAAM,CAE5C,IADA,IAAI6C,EAAiB,EACZC,EAAE,EAAIA,EAAIH,EAAWG,IACxB9C,EAAK,GAAK8C,IAAMD,GAAkBL,EAAIM,IAE5C,GAAIL,IAAMI,EAAkB,OAAO,EAErC,OAAO,GAGHE,6MAYLC,MAAQD,EAAKE,iBAEZX,UAAY,kBAAMY,EAAKC,SAASJ,EAAKE,mBAErCd,aAAe,SAACiB,GACXF,EAAKF,MAAM7B,gBAAgBc,QAAQmB,IAAkB,GACrDF,EAAKF,MAAMhB,YAAYC,QAAQmB,IAAkB,GACpDF,EAAKC,SAAS,SAAAE,GAAS,MAAK,CAC1BzC,cAAe,KACfO,gBAAiBkC,EAAUlC,gBAAgBmC,OAAOF,SAItDvB,eAAiB,SAACuB,GAChBF,EAAKC,SAAS,SAAAE,GAAS,MAAK,CAC1BzC,cAAe,KACfO,gBAAiBkC,EAAUlC,gBAAgBoC,OAAO,SAAA5B,GAAM,OAAIA,IAAWyB,UAI3EnC,YAAc,WACZiC,EAAKC,SAAS,SAAAE,GAAS,MAAK,CAC1BzC,cAAeyC,EAAUpD,gBACvBoD,EAAUlC,gBAAgBqC,OAAO,SAACC,EAAKhB,GAAN,OAAYgB,EAAMhB,GAAI,SAI7D3B,aAAe,WACboC,EAAKC,SAAS,SAAAE,GAAS,MAAK,CAC1BrB,YAAaqB,EAAUrB,YAAYsB,OAAOD,EAAUlC,iBACpDA,gBAAiB,GACjBP,cAAe,KACfX,cAAe8C,EAAKW,iBAClBR,EAAKS,qBAIXrC,OAAS,WACuB,IAA3B4B,EAAKF,MAAMzB,aACd2B,EAAKC,SAAS,SAAAE,GAAS,MAAK,CAC1BpD,cAAe8C,EAAKW,eACpB9C,cAAe,KACfO,gBAAiB,GACjBI,YAAa8B,EAAU9B,YAAc,IACnC2B,EAAKS,qBAGXC,kBAAoB,SAAAC,GAAkC,IAAhC5D,EAAgC4D,EAAhC5D,cAAe+B,EAAiB6B,EAAjB7B,YAE7B8B,EADK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACPP,OAAO,SAAA5B,GAAM,OAAqC,IAAjCK,EAAYC,QAAQN,KAElE,OAAOY,EAAuBuB,EAAiB7D,MAGjD0D,iBAAmB,WACjBT,EAAKC,SAAS,SAAAE,GACZ,OAAoC,IAAjCA,EAAUrB,YAAYZ,OAChB,CAACiB,WAAY,8BAEO,IAA1BgB,EAAU9B,aAAsB2B,EAAKU,kBAAkBP,QAA1D,EACS,CAAChB,WAAY,yFAKlB,IAAA0B,EAQFC,KAAKhB,MANP7B,EAFI4C,EAEJ5C,gBACAlB,EAHI8D,EAGJ9D,cACAW,EAJImD,EAIJnD,cACAoB,EALI+B,EAKJ/B,YACAT,EANIwC,EAMJxC,YACAc,EAPI0B,EAOJ1B,WAGF,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4D,EAAD,CAAOhE,cAAiBA,IACxBE,EAAAC,EAAAC,cAAC6D,EAAD,CAAQ/C,gBAAmBA,EACnBU,eAAkBmC,KAAKnC,iBAC/B1B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC8D,EAAD,CAAQhD,gBAAmBA,EACnBI,YAAeA,EACfN,YAAe+C,KAAK/C,YACpBH,aAAgBkD,KAAKlD,aACrBQ,OAAU0C,KAAK1C,OACfV,cAAkBA,KAG5BT,EAAAC,EAAAC,cAAA,WACCgC,EACAlC,EAAAC,EAAAC,cAAC+D,EAAD,CAAW9B,UAAa0B,KAAK1B,UAClBD,WAAcA,IACzBlC,EAAAC,EAAAC,cAACgE,EAAD,CAASlD,gBAAmBA,EACnBgB,aAAgB6B,KAAK7B,aACrBH,YAAeA,YAhHdsC,aAAbvB,EAEGW,aAAe,kBAAM,EAAIa,KAAKC,MAAsB,EAAhBD,KAAKE,WAF5C1B,EAGGE,aAAe,iBAAO,CACzB9B,gBAAiB,GACjBlB,cAAe8C,EAAKW,eACpB1B,YAAa,GACbpB,cAAe,KACfW,YAAa,EACbc,WAAY,OA8GHU,QCjIA2B,mLARX,OACEvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsE,EAAD,cAJUL,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7d58a515.chunk.js","sourcesContent":["import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\n\nconst Stars = (props) => {\n\n  let stars = [];\n  for (let i=0; i < props.randomStarNum; i++){\n    stars.push(<i className=\"fa fa-star\"><FontAwesomeIcon icon={faStar} /></i>);\n  }\n   \n  return (\n    <div className=\"stars\">\n      {stars}\n    </div>\n  );\n}\n\nexport default Stars","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { faCheckDouble } from '@fortawesome/free-solid-svg-icons'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { faRedo } from '@fortawesome/free-solid-svg-icons'\n\nconst Button = (props) => {\n  let button;\n  switch(props.answerCorrect){\n    case true:\n      button =       \n      <button className=\"btn-verify\" onClick = {props.acceptAnswer}>\n        <i className=\"fa-check\"><FontAwesomeIcon icon={faCheckDouble} /></i>\n      </button>\n      break;\n\n    case false:\n      button =       \n      <button className=\"btn-verify\">\n        <i className=\"fa-times\"><FontAwesomeIcon icon={faTimes} /></i>\n      </button>\n      break;\n    \n    default:\n      button =       \n        <button className=\"btn\" \n                onClick={props.checkAnswer}\n                disabled={props.selectedNumbers.length === 0}>\n        <i><FontAwesomeIcon icon={faCheck} /></i>\n        </button>\n      break;\n\n  }\n  return (\n    <div  className=\"iconRow\">\n      {button}\n      <button className=\"btn-redo\" \n              onClick={props.redraw}\n              disabled={props.redrawCount === 0}>\n      <i className=\"faRedo\"><FontAwesomeIcon icon={faRedo} /></i>{props.redrawCount}\n      </button>\n    </div>\n  );\n}\n\nexport default Button;","import React from 'react';\n\nconst Answer = (props) => {\n  return (\n    <div  className=\"iconRow\">\n      {props.selectedNumbers.map((number, i) => \n        <span key={i}\n          onClick={() => props.unselectNumber(number)}>\n          {number}\n        </span>\n        )}\n    </div>\n  );\n}\n\nexport default Answer","import React from 'react';\n// import { Range } from 'react-lodash';\n\nconst Numbers = (props) => {\n  const numberClassName = (number) => {\n    if (props.usedNumbers.indexOf(number) >= 0) {\n      return 'used';\n    }\n    if (props.selectedNumbers.indexOf(number) >= 0) {\n      return 'selected';\n    }\n  };\n  return (\n    <div className=\"card text-center\">\n      <div>\n        {Numbers.list.map((number, i) =>\n          <span key={i} className={numberClassName(number)}\n                onClick={() => props.selectNumber(number)}>\n            {number}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nNumbers.list = [1,2,3,4,5,6,7,8,9];\n\nexport default Numbers;","import React from 'react';\n\nconst DoneFrame = (props) => {\n  return(\n    <div className=\"done\">\n      <h2>{props.doneStatus}</h2>\n      <button className=\"btn-play-again\" onClick={props.resetGame}>Play Again</button>\n    </div>\n  );\n}\n\nexport default DoneFrame;\n\n","import React, { Component } from 'react';\nimport '../styles/game.css';\nimport Stars from './stars.js';\nimport Button from './button.js';\nimport Answer from './answer.js';\nimport Numbers from './numbers.js';\nimport DoneFrame from './doneframe.js';\n\nvar possibleCombinationSum = function(arr, n) {\n  if (arr.indexOf(n) >= 0) { return true; }\n  if (arr[0] > n) { return false; }\n  if (arr[arr.length - 1] > n) {\n    arr.pop();\n    return possibleCombinationSum(arr, n);\n  }\n  var listSize = arr.length, combinationsCount = (1 << listSize)\n  for (var i = 1; i < combinationsCount ; i++ ) {\n    var combinationSum = 0;\n    for (var j=0 ; j < listSize ; j++) {\n      if (i & (1 << j)) { combinationSum += arr[j]; }\n    }\n    if (n === combinationSum) { return true; }\n  }\n  return false;\n};\n\nclass Game extends Component {\n\n  static randomNumber = () => 1 + Math.floor(Math.random() * 9)\n  static initialState = () => ({\n      selectedNumbers: [],\n      randomStarNum: Game.randomNumber(),\n      usedNumbers: [],\n      answerCorrect: null,\n      redrawCount: 5,\n      doneStatus: null,\n  });\n\n\tstate = Game.initialState();\n\n  resetGame = () => this.setState(Game.initialState());\n\n  selectNumber = (clickedNumber) => {\n    if(this.state.selectedNumbers.indexOf(clickedNumber) >= 0) { return ;}\n    if(this.state.usedNumbers.indexOf(clickedNumber) >= 0) { return ;}\n    this.setState(prevState => ({\n      answerCorrect: null,\n      selectedNumbers: prevState.selectedNumbers.concat(clickedNumber)\n    }))\n  }\n\n  unselectNumber = (clickedNumber) => {\n    this.setState(prevState => ({\n      answerCorrect: null,\n      selectedNumbers: prevState.selectedNumbers.filter(number => number !== clickedNumber)\n    }))\n  }\n\n  checkAnswer = () => {\n    this.setState(prevState => ({\n      answerCorrect: prevState.randomStarNum === \n        prevState.selectedNumbers.reduce((acc, n) => acc + n , 0)\n    }));\n  };\n\n  acceptAnswer = () => {\n    this.setState(prevState => ({\n      usedNumbers: prevState.usedNumbers.concat(prevState.selectedNumbers),\n      selectedNumbers: [],\n      answerCorrect: null,\n      randomStarNum: Game.randomNumber(),\n    }), this.updateDoneStatus)\n  }\n\n\n  redraw = () => {\n    if(this.state.redrawCount === 0){ return; }\n    this.setState(prevState => ({\n      randomStarNum: Game.randomNumber(),\n      answerCorrect: null,\n      selectedNumbers: [],\n      redrawCount: prevState.redrawCount - 1 \n    }), this.updateDoneStatus);\n  }\n\n  possibleSolutions = ({randomStarNum, usedNumbers}) => {\n    let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const possibleNumbers = nums.filter(number => usedNumbers.indexOf(number) === -1); \n\n    return possibleCombinationSum(possibleNumbers, randomStarNum);\n  }\n\n  updateDoneStatus = () => {\n    this.setState(prevState => {\n      if(prevState.usedNumbers.length === 9) {\n        return {doneStatus: 'Congratulations - You win!'};\n      }\n      if(prevState.redrawCount === 0 && !this.possibleSolutions(prevState)) {\n        return {doneStatus: 'Game Over!'}\n      }\n    });\n  }\n\n  render(){\n    const { \n      selectedNumbers, \n      randomStarNum, \n      answerCorrect,\n      usedNumbers,\n      redrawCount,\n      doneStatus\n    } = this.state;\n\n    return(\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1>Play Nine</h1>\n          <hr />\n        </div>\n        <div>\n          <Stars randomStarNum = {randomStarNum}/>\n          <Answer selectedNumbers = {selectedNumbers}\n                  unselectNumber = {this.unselectNumber} />\n          <br/>\n          <Button selectedNumbers = {selectedNumbers}\n                  redrawCount = {redrawCount}\n                  checkAnswer = {this.checkAnswer}\n                  acceptAnswer = {this.acceptAnswer}\n                  redraw = {this.redraw} \n                  answerCorrect = { answerCorrect}/>\n\n        </div>\n        <br />\n        {doneStatus ? \n         <DoneFrame resetGame = {this.resetGame}\n                    doneStatus = {doneStatus} /> :\n         <Numbers selectedNumbers = {selectedNumbers}\n                  selectNumber = {this.selectNumber}\n                  usedNumbers = {usedNumbers} />\n        }\n      </div>\n    );\n  }\n}\n\nexport default Game","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './styles/App.css';\nimport Game from './components/game.js';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}